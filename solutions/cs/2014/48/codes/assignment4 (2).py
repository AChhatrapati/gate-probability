# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nuchYitwbp8TFXT7FTCmsPGfKIvDFDbB
"""

import numpy as np
import matplotlib.pyplot as plt
#If using termux
import subprocess
import shlex
#end if

#Sample size
simlen = 1000000
#Possible outcomes
n = range(4,25)
# Generate X1 and X2 and X3
y = np.random.randint(1,7, size=(4, simlen))

#Generate X
X = np.sum(y, axis = 0) 
#Find the frequency of each outcome
unique, counts = np.unique(X, return_counts=True)
#Simulated probability
psim = counts/simlen
a=0
#Theoretical probability
n1 = np.array([4,5,6,7,8,9])
n2 = np.array([10,11,12,13,14,15])
n3 = np.array([16,17,18,19,20,21])
n4 = np.array([22,23,24])
panal1=[]
panal2=[]
panal3=[]
panal4=[]
for i in range(6):
  panal1.append((n1[i])**3-6*(n1[i])**2+11*n1[i]-6)
  panal2.append(-n2[i]*753+2010+90*n2[i]**2-3*n2[i]**3)
  panal3.append(3*n3[i]**3-162*n3[i]**2+2769*n3[i]-14370)
for i in range(3):
  panal4.append(17550-n4[i]**3+78*n4[i]**2-2027*n4[i])
panal= np.concatenate((panal1,panal2,panal3,panal4),axis=None)/7776
a=np.sum(panal)
print("The generated probability mass function adds to ",a)
#Plotting
plt.stem(n,psim, markerfmt='o', use_line_collection=True, label='Simulation')
plt.stem(n,panal, markerfmt='o',use_line_collection=True, label='Analysis')
plt.xlabel('$n$')
plt.ylabel('$p_{X}(n)$')
plt.legend()
plt.grid()# minor
print("Therefore simulations are close to analysis")